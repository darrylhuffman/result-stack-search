
import { useState, useEffect } from 'react'
import Head from 'next/head'
import Link from 'next/link'
import styles from '../../styles/User.module.scss'
import { useRouter } from 'next/router'

import Footer from '../../components/Footer'

import { GoLocation, GoMail, GoRepo, GoStar, GoRepoForked, GoX } from 'react-icons/go'

export default function User() {
    const router = useRouter(),
        username = router.query.slug,
        [user, setUser] = useState(null),
        [repos, setRepos] = useState(null)

    useEffect(() => {
        if(!username) return;
        getUser()
        .then(user => getRepos(user))
    }, [username])

    function getUser(){
        return new Promise((res, rej) => {
            fetch(`https://api.github.com/users/${username}`, {
                method: 'get',
                headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
                }
            })
            .then(r => r.json())
            .then(r => {
                setUser(r)
                res(r)
            })
            .catch(r => rej(r))
        })
    }

    function getRepos(user){
        return new Promise((res, rej) => {
            fetch(user.repos_url, {
                method: 'get',
                headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
                }
            })
            .then(r => r.json())
            .then(r => {
                setRepos(r)
                res(r)
            })
            .catch(r => rej(r))
        })
    }

    if(!user) return <div className={styles.loading}>Loading...</div>

    const userJoinDate = new Date(user.created_at),
        userUpdateDate = new Date(user.updated_at)

	return (
		<div className={styles.container}>
			<Head>
				<title>{username} - ResultStack Interview Prompt</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className={styles.main}>
                <div className={styles.userProfile}>
                    <Link href={'/'}>
                        <a className={styles.backButton}><GoX /></a>
                    </Link>
                    <div className={styles.userInfo}>
                        <div className={styles.userImage} style={{ backgroundImage: `url(${user.avatar_url})`}} />
                        <h1>{user.name}</h1>
                        <h2><a target='_blank' href={user.html_url} rel="noreferrer">{username}</a></h2>

                        <div className={styles.userDetails}>
                            {user.email != null && <h3>
                                <GoMail /> 
                                <a href={'mailto:' + user.email}>{user.email}</a>
                            </h3>}
                            {user.location != null && <h3><GoLocation /> {user.location}</h3>}
                        </div>

                        <h4>Joined {userJoinDate.getMonth() + 1}/{userJoinDate.getDate()}/{userJoinDate.getFullYear()}</h4>
                        <h4>Last update {userUpdateDate.getMonth() + 1}/{userUpdateDate.getDate()}/{userUpdateDate.getFullYear()}</h4>
                    </div>
                    <div className={styles.userRepos}>
                        <div className={styles.header}>
                            <GoRepo /> Repositories <span className={styles.repoCount}>{user.public_repos}</span>
                        </div>
                        <div className={styles.repos}>
                            {repos != null && repos.filter((x,i) => i < 10).map((repo, i) => (
                                <div className={styles.repo} key={i}>
                                    <h2><a target='_blank' href={repo.html_url} rel="noreferrer">{repo.name}</a></h2>
                                    <p>{repo.description}</p>
                                    <div className={styles.repoStats}>
                                        {repo.language && <span className={styles.repoStat} alt='language'>{repo.language}</span>}
                                        {repo.stargazers_count && <span className={styles.repoStat} alt='stars'><GoStar /> {repo.stargazers_count}</span>}
                                        {repo.forks && <span className={styles.repoStat} alt='forks'><GoRepoForked /> {repo.forks}</span>}
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
			</main>

            <Footer />
		</div>
	)
}
